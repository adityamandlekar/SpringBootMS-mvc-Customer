import os
import os.path
from sets import Set
import string
import xml
import xml.etree.ElementTree as ET

def get_all_fids_from_PersistXml(xmlfile):
    """get all fids from PMAT extactor's xml output file
     Returns a list of fids appeared in the file.
     Argument : PMAT extractor's xml output file name    
    """ 
    treeRoot = ET.parse(xmlfile).getroot()
    fidsSet = [];
    for atype in treeRoot.findall('.//FIELD'):
        fid = atype.get('id')
        fidsSet.append(fid)
    
    return fidsSet

def verify_ric_in_persist_dump_file(persist_dump_file, ric, domain):
    ''' Check if ric and domain appeared in the persist_dump_file. 
        persist_dump_file usually contains one RIC and Domain if user applies RIC and Domain filter in running PMAT dump.
        Argument : persist_dump_file:  the output file generated by runing PMAT with dump option
                   ric :  ric that need to be checked
                   domain : data domain for the ric in PMAT domain format: MarketPrice, MarketByOrder etc
        Return : Nil
    '''     
    if not os.path.exists(persist_dump_file):
        raise AssertionError('*ERROR*  %s is not available' %persist_dump_file) 
    
    tree = ET.parse(persist_dump_file)
    root = tree.getroot() 
    
    ric_path = './/DatabaseEntry/RIC'
    domain_path = './/DatabaseEntry/DOMAIN'

    ric_nodes = root.findall(ric_path)
    if ric_nodes is None:
        raise AssertionError('*ERROR*  Missing RIC element under %s from file: %s' %(ric_path, persist_dump_file))

    ric_exist = False
    for val in ric_nodes:
        if val.text == ric:
            ric_exist = True
            break
            
    if not ric_exist:  
        raise AssertionError('*ERROR* ric %s is not found in persist file %s' %(ric, persist_dump_file))  
    
    domain_exist = False
    domain_nodes = root.findall(domain_path)
    if domain_nodes is None:
        raise AssertionError('*ERROR*  Missing DOMAIN element under %s from file: %s' %(domain_path, persist_dump_file))
    
    for val in domain_nodes:
        if val.text.upper() == domain.upper():
            domain_exist = True
            break
            
    if not domain_exist:  
        raise AssertionError('*ERROR* domain %s is not found in persist file %s' %(domain, persist_dump_file))  

